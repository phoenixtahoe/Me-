{"ast":null,"code":"import _classCallCheck from \"/Users/phoenixdavid/Work/phoenix/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phoenixdavid/Work/phoenix/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phoenixdavid/Work/phoenix/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phoenixdavid/Work/phoenix/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phoenixdavid/Work/phoenix/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phoenixdavid/Work/phoenix/src/components/test/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from \"react-router-dom\";\nimport Particles from 'react-particles-js';\nimport Snap from 'snapsvg-cjs';\n\nvar Test =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Test, _Component);\n\n  function Test() {\n    _classCallCheck(this, Test);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Test).apply(this, arguments));\n  }\n\n  _createClass(Test, [{\n    key: \"svgRender\",\n    value: function svgRender() {\n      var element = Snap(this.svgDiv);\n      Snap.load(svg, function (data) {\n        if (element) {\n          element.append(data);\n        }\n\n        var letterSpeed = 5; //higher = faster\n\n        var colorSpeed = 1; //higher = faster\n\n        var colors = ['#e9edef', '#efad42', '#e9435a', '#4aadad', '#83cead'];\n        var letters = Snap.selectAll('.letter');\n        var tl = new TimelineMax({\n          repeat: -1,\n          yoyo: true\n        });\n\n        for (var i = 0; i < letters.length; i += 1) {\n          var letter = letters[i];\n          tl.set(letter.node, {\n            rotation: 180 - Math.random() * 360,\n            x: 20,\n            y: -200\n          }, 0);\n          var tw = TweenMax.to(letter.node, 0.6, {\n            rotation: 0,\n            x: 0,\n            y: 0,\n            ease: Back.easeOut\n          });\n          tl.add(tw, 0.5 + i / letterSpeed);\n          var paths = letter.selectAll('*');\n\n          for (var k = 0; k < paths.length; k += 1) {\n            for (var j = 0; j < colors.length; j += 1) {\n              var l = paths[k].clone();\n              l.attr({\n                stroke: colors[j]\n              });\n              var delay = 0.1 + i / letterSpeed + (colors.length - j / colorSpeed) / 10;\n              var tw = TweenMax.fromTo(l.node, 1, {\n                drawSVG: '0%'\n              }, {\n                drawSVG: '100%',\n                ease: Power2.easeInOut\n              });\n              tl.add(tw, delay);\n            } //paths[k].remove();\n\n\n            letter.prepend(paths[k]);\n            TweenMax.set(paths[k].node, {\n              x: -3,\n              y: -3\n            });\n            var tw = TweenMax.fromTo(paths[k].node, 1, {\n              drawSVG: '0%'\n            }, {\n              drawSVG: '100%',\n              ease: Power2.easeInOut\n            });\n            tl.add(tw, delay);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.svgRender();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.svgRender();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        ref: function ref(d) {\n          return _this.svgDiv = d;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Test;\n}(Component);\n\nexport { Test as default };","map":{"version":3,"sources":["/Users/phoenixdavid/Work/phoenix/src/components/test/index.js"],"names":["React","Component","ReactDOM","Link","Particles","Snap","Test","element","svgDiv","load","svg","data","append","letterSpeed","colorSpeed","colors","letters","selectAll","tl","TimelineMax","repeat","yoyo","i","length","letter","set","node","rotation","Math","random","x","y","tw","TweenMax","to","ease","Back","easeOut","add","paths","k","j","l","clone","attr","stroke","delay","fromTo","drawSVG","Power2","easeInOut","prepend","svgRender","d"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {Link} from \"react-router-dom\";\nimport Particles from 'react-particles-js';\nimport '../test.svg';\nimport Snap from 'snapsvg-cjs';\n\nexport default class Test extends Component {\n\t\tsvgRender() {\n\t    let element = Snap(this.svgDiv);\n\t    Snap.load(svg, function(data){\n\t      if (element) {\n\t        element.append(data);\n\t      }\n\t      var letterSpeed = 5; //higher = faster\n\t      var colorSpeed = 1; //higher = faster\n\t      let colors = [\n\t        '#e9edef', '#efad42', '#e9435a', '#4aadad', '#83cead'\n\t      ];\n\t      let letters = Snap.selectAll('.letter');\n\t      let tl = new TimelineMax({\n\t        repeat: -1,\n\t        yoyo: true\n\t      });\n\n\t      for (var i = 0; i < letters.length; i += 1) {\n\t        var letter = letters[i];\n\n\t        tl.set(letter.node, {\n\t          rotation: 180 - (Math.random() * 360),\n\t          x: 20,\n\t          y: -200\n\t        }, 0);\n\n\t        var tw = TweenMax.to(letter.node, 0.6, {\n\t          rotation: 0,\n\t          x: 0,\n\t          y: 0,\n\t          ease: Back.easeOut\n\t        });\n\n\t        tl.add(tw, 0.5 + (i / letterSpeed));\n\n\t        var paths = letter.selectAll('*');\n\t        for (var k = 0; k < paths.length; k += 1) {\n\t          for (var j = 0; j < colors.length; j += 1) {\n\n\t            var l = paths[k].clone();\n\t            l.attr({\n\t              stroke: colors[j]\n\t            });\n\n\t            var delay = (0.1 + (i / letterSpeed) + ((colors.length - (j / colorSpeed))) / 10);\n\t            var tw = TweenMax.fromTo(l.node, 1, {\n\t              drawSVG: '0%'\n\t            }, {\n\t              drawSVG: '100%',\n\t              ease: Power2.easeInOut\n\t            });\n\t            tl.add(tw, delay);\n\n\t          }\n\n\t          //paths[k].remove();\n\t          letter.prepend(paths[k]);\n\t          TweenMax.set(paths[k].node, {\n\t            x: -3,\n\t            y: -3\n\t          });\n\t          var tw = TweenMax.fromTo(paths[k].node, 1, {\n\t            drawSVG: '0%'\n\t          }, {\n\t            drawSVG: '100%',\n\t            ease: Power2.easeInOut\n\t          });\n\t          tl.add(tw, delay);\n\n\t        }\n\n\t      }\n\t    });\n\t  }\n\t  componentDidMount() {\n\t    this.svgRender();\n\t  }\n\t  componentDidUpdate() {\n\t    this.svgRender();\n\t  }\n\t  render() {\n\t    return  <div ref={d=>this.svgDiv=d} />\n\t  }\n\t}\n"]},"metadata":{},"sourceType":"module"}